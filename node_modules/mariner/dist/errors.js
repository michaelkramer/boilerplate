'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DialectUnknown = exports.DialectMissingMethod = exports.NoConfigError = exports.NoDownMigrationError = exports.InvalidMigrationError = exports.RuntimeMigrationError = exports.MigrationMissingError = exports.MigrationExistsError = exports.MigrationsDirectoryNotFoundError = exports.MarinerError = undefined;

var _util = require('util');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MarinerError = exports.MarinerError = function (_Error) {
  _inherits(MarinerError, _Error);

  function MarinerError(message, code) {
    _classCallCheck(this, MarinerError);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(MarinerError).apply(this, arguments));

    Error.captureStackTrace(_this, _this.constructor);
    _this.name = _this.constructor.name;
    _this.message = message;
    _this.code = code;
    return _this;
  }

  return MarinerError;
}(Error);

var MigrationsDirectoryNotFoundError = exports.MigrationsDirectoryNotFoundError = function (_MarinerError) {
  _inherits(MigrationsDirectoryNotFoundError, _MarinerError);

  function MigrationsDirectoryNotFoundError() {
    var _Object$getPrototypeO;

    _classCallCheck(this, MigrationsDirectoryNotFoundError);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this2 = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(MigrationsDirectoryNotFoundError)).call.apply(_Object$getPrototypeO, [this].concat(args)));

    _this2.name = 'MigrationsDirectoryNotFoundError';
    _this2.message = 'Migrations directory not found';
    return _this2;
  }

  return MigrationsDirectoryNotFoundError;
}(MarinerError);

var MigrationExistsError = exports.MigrationExistsError = function (_MarinerError2) {
  _inherits(MigrationExistsError, _MarinerError2);

  function MigrationExistsError() {
    var _Object$getPrototypeO2;

    _classCallCheck(this, MigrationExistsError);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var _this3 = _possibleConstructorReturn(this, (_Object$getPrototypeO2 = Object.getPrototypeOf(MigrationExistsError)).call.apply(_Object$getPrototypeO2, [this].concat(args)));

    _this3.name = 'MigrationExistsError';
    _this3.message = 'Migration already exists';
    return _this3;
  }

  return MigrationExistsError;
}(MarinerError);

var MigrationMissingError = exports.MigrationMissingError = function (_MarinerError3) {
  _inherits(MigrationMissingError, _MarinerError3);

  function MigrationMissingError(list) {
    var _Object$getPrototypeO3;

    _classCallCheck(this, MigrationMissingError);

    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    var _this4 = _possibleConstructorReturn(this, (_Object$getPrototypeO3 = Object.getPrototypeOf(MigrationMissingError)).call.apply(_Object$getPrototypeO3, [this].concat(args)));

    list = list || [];

    _this4.name = 'MigrationMissingError';
    _this4.message = 'The following migrations have been run, but do not exist on the filesystem:\n';
    _this4.message += list.map(function (name) {
      return (0, _util.format)('\t- %s', name);
    }).join('\n');
    return _this4;
  }

  return MigrationMissingError;
}(MarinerError);

var RuntimeMigrationError = exports.RuntimeMigrationError = function (_MarinerError4) {
  _inherits(RuntimeMigrationError, _MarinerError4);

  function RuntimeMigrationError(filename, error) {
    _classCallCheck(this, RuntimeMigrationError);

    var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(RuntimeMigrationError).call(this, error.message));

    _this5.name = 'RuntimeMigrationError';
    _this5.message = filename + ': ' + error.message;
    _this5.originalError = error;
    return _this5;
  }

  return RuntimeMigrationError;
}(MarinerError);

var InvalidMigrationError = exports.InvalidMigrationError = function (_MarinerError5) {
  _inherits(InvalidMigrationError, _MarinerError5);

  function InvalidMigrationError(migrationName) {
    var _Object$getPrototypeO4;

    _classCallCheck(this, InvalidMigrationError);

    for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      args[_key4 - 1] = arguments[_key4];
    }

    var _this6 = _possibleConstructorReturn(this, (_Object$getPrototypeO4 = Object.getPrototypeOf(InvalidMigrationError)).call.apply(_Object$getPrototypeO4, [this].concat(args)));

    _this6.name = 'InvalidMigrationError';
    _this6.message = 'Invalid migration file: ' + migrationName;
    return _this6;
  }

  return InvalidMigrationError;
}(MarinerError);

var NoDownMigrationError = exports.NoDownMigrationError = function (_MarinerError6) {
  _inherits(NoDownMigrationError, _MarinerError6);

  function NoDownMigrationError(migrationName) {
    var _Object$getPrototypeO5;

    _classCallCheck(this, NoDownMigrationError);

    for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
      args[_key5 - 1] = arguments[_key5];
    }

    var _this7 = _possibleConstructorReturn(this, (_Object$getPrototypeO5 = Object.getPrototypeOf(NoDownMigrationError)).call.apply(_Object$getPrototypeO5, [this].concat(args)));

    _this7.name = 'NoDownMigrationError';
    _this7.message = 'Migration has no down: ' + migrationName;
    return _this7;
  }

  return NoDownMigrationError;
}(MarinerError);

var NoConfigError = exports.NoConfigError = function (_MarinerError7) {
  _inherits(NoConfigError, _MarinerError7);

  function NoConfigError(dialect) {
    var _Object$getPrototypeO6;

    _classCallCheck(this, NoConfigError);

    for (var _len6 = arguments.length, args = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
      args[_key6 - 1] = arguments[_key6];
    }

    var _this8 = _possibleConstructorReturn(this, (_Object$getPrototypeO6 = Object.getPrototypeOf(NoConfigError)).call.apply(_Object$getPrototypeO6, [this].concat(args)));

    _this8.name = 'NoConfigError';
    _this8.message = 'Could not locate mariner.js file run `mariner init --help` for options';
    return _this8;
  }

  return NoConfigError;
}(MarinerError);

var DialectMissingMethod = exports.DialectMissingMethod = function (_MarinerError8) {
  _inherits(DialectMissingMethod, _MarinerError8);

  function DialectMissingMethod(dialect, method) {
    var _Object$getPrototypeO7;

    _classCallCheck(this, DialectMissingMethod);

    for (var _len7 = arguments.length, args = Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {
      args[_key7 - 2] = arguments[_key7];
    }

    var _this9 = _possibleConstructorReturn(this, (_Object$getPrototypeO7 = Object.getPrototypeOf(DialectMissingMethod)).call.apply(_Object$getPrototypeO7, [this].concat(args)));

    _this9.name = 'DialectMissingMethod';
    _this9.message = dialect + ' must override ' + method + ' method';
    return _this9;
  }

  return DialectMissingMethod;
}(MarinerError);

var DialectUnknown = exports.DialectUnknown = function (_MarinerError9) {
  _inherits(DialectUnknown, _MarinerError9);

  function DialectUnknown(dialect) {
    var _Object$getPrototypeO8;

    _classCallCheck(this, DialectUnknown);

    for (var _len8 = arguments.length, args = Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
      args[_key8 - 1] = arguments[_key8];
    }

    var _this10 = _possibleConstructorReturn(this, (_Object$getPrototypeO8 = Object.getPrototypeOf(DialectUnknown)).call.apply(_Object$getPrototypeO8, [this].concat(args)));

    _this10.name = 'DialectUnknown';
    _this10.message = 'Uknown dialect ' + dialect + ', try npm install --save mariner-' + dialect;
    return _this10;
  }

  return DialectUnknown;
}(MarinerError);