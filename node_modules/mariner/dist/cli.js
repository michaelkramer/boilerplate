#!/usr/bin/env node
'use strict';

require('./promisify');

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _nodeBeautify = require('node-beautify');

var _nodeBeautify2 = _interopRequireDefault(_nodeBeautify);

var _migrate = require('./migrate');

var _migrate2 = _interopRequireDefault(_migrate);

var _errors = require('./errors');

var _index = require('./dialect/js/index');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('./dialect/sql/index');

var _index4 = _interopRequireDefault(_index3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var filename = _path2.default.join(process.cwd(), 'mariner.js');
var defaultPath = _path2.default.join(process.cwd(), 'migrations');

function getConfig() {
  var exists = _fs2.default.existsSync(filename);
  var cfg = exists ? require(filename) : {};

  if (cfg.directory) {
    cfg.directory = _path2.default.resolve(process.cwd(), cfg.directory);
  } else {
    cfg.directory = defaultPath;
  }

  return cfg;
}

function ensureConfig() {
  if (!_fs2.default.existsSync(filename)) {
    throw new _errors.NoConfigError();
  }
}

function initDialects(config) {
  config.dialects = _lodash2.default.transform(config.plugins, function (dialects, plugin) {
    if (_lodash2.default.isString(plugin)) {
      var name = plugin.indexOf('mariner-') !== -1 ? plugin : 'mariner-' + plugin;
      var isSql = plugin === 'sql';
      var isInternal = isSql || plugin === 'js';

      if (isInternal) {
        dialects[plugin] = isSql ? _index4.default : _index2.default;
      } else {
        dialects[name.replace('mariner-', '')] = require(name);
      }
    } else if (_lodash2.default.isArray(plugin)) {
      dialects[plugin[0]] = plugin[1];
    }
  });
}

function initBackend(config) {
  var full = config.backend.indexOf('mariner-') !== -1 ? config.backend : 'mariner-' + config.backend;
  var short = full.replace('mariner-', '');
  var backend = config.dialects[short];

  if (!backend) {
    try {
      backend = require(full);
    } catch (e) {
      console.error(e); // eslint-disable-line no-console
    }
  }

  backend = backend && backend.Store ? backend.Store : backend;

  config.backend = short;
  config.backendStore = backend;

  return config;
}

function init() {
  var config = getConfig();

  initDialects(config);

  if (config.backend) {
    initBackend(config);
  }

  return config;
}

var config = init();

_commander2.default.version(require('../package.json').version);

_commander2.default.command('create <name...>').option('-e, --extension <extension>', 'Dialect Extension', 'sql').description('Create a new database migration').action(function (name, command) {
  ensureConfig();

  name = name.join('-');

  var options = command.opts();

  var migrate = new _migrate2.default(config);

  migrate.create(name, options).then(function (created) {
    console.log('Created:', created); // eslint-disable-line no-console
  }).catch(_errors.MarinerError, function (err) {
    console.error('⛵\tERROR: ', err.message); // eslint-disable-line no-console
    process.exit(1);
  }).catch(function (err) {
    console.error(err.stack); // eslint-disable-line no-console
    process.exit(1);
  });
});

_commander2.default.command('init').option('-d --directory <directory>', 'Path to migrations', './migrations').option('-b --backwards', 'Backwards compatibilty', false).description('Generate the default .mariner configuration file').action(function (command) {
  var options = command.opts();

  var shim = options.backwards ? '\n      // see list of available options at http://knexjs.org\n      sql: {\n        client: \'pg\',\n        connection : process.env.DATABASE_URL || process.env.POSTGRES_URL,\n      },\n\n      backend : \'sql\',\n    ' : '\n      // see list of available options at http://knexjs.org\n      sql: {},\n\n      backend: \'sql\',\n    ';

  var output = '\n      \'use strict\';\n\n      module.exports = {\n        directory: \'' + options.directory + '\',\n\n        stopOnWarning: true,\n\n        plugins: [\n          \'sql\',\n          \'js\'\n        ],\n\n        ' + shim.trim() + '\n      };\n    ';

  var code = _nodeBeautify2.default.beautifyJs(output.trim(), {
    indentSize: 2
  });

  _fs2.default.writeFileSync(_path2.default.join(process.cwd(), 'mariner.js'), code);

  console.log('⛵\tInit: ', 'Configuration file generated'); // eslint-disable-line
});

_commander2.default.command('migrate <direction>').option('-n, --number <number>', 'How many migrations to run', null).description('Run database migrations; up defaults to running all, down defaults to running last').action(function (direction, command) {
  ensureConfig();

  var options = command.opts();
  var count = options.number ? Number(options.number) : null;

  var migrate = new _migrate2.default(config);

  return migrate.init().then(function () {
    return migrate.run(direction, count);
  }).then(function () {
    process.exit(0);
  }).catch(_errors.MarinerError, function (err) {
    console.error('⛵\tERROR: ', err.message); // eslint-disable-line no-console
    process.exit(1);
  }).catch(function (err) {
    console.error(err.stack); // eslint-disable-line no-console
    process.exit(1);
  });
});

_commander2.default.parse(process.argv);