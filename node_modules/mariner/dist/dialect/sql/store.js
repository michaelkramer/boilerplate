'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _knex = require('knex');

var _knex2 = _interopRequireDefault(_knex);

var _mariner = require('../../mariner');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var sqlStore = function (_Store) {
  _inherits(sqlStore, _Store);

  function sqlStore(options) {
    _classCallCheck(this, sqlStore);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(sqlStore).apply(this, arguments));

    _this.options = _extends({}, options);

    if (options.isBackend) {
      _this.tableName = options.tableName || 'migrations';
      _this.listItems = null;
    }
    return _this;
  }

  _createClass(sqlStore, [{
    key: 'init',
    value: function init() {
      var _this2 = this;

      var client = this.getClient();

      return this.options.isBackend ? client.schema.hasTable(this.tableName).then(function (exists) {
        return exists ? null : client.schema.createTable(_this2.tableName, function (table) {
          table.increments('id').primary();
          table.string('name').unique().notNullable();
          table.dateTime('migration_time').notNullable();
        });
      }) : null;
    }
  }, {
    key: 'getClient',
    value: function getClient() {
      if (!sqlStore.client) {
        sqlStore.client = (0, _knex2.default)(this.options);
      }

      return sqlStore.client;
    }
  }, {
    key: 'execute',
    value: function execute(query) {
      var bindings = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

      var client = this.getClient();

      return client.raw(query, bindings);
    }
  }, {
    key: 'record',
    value: function record(name) {
      var client = this.getClient();

      return client(this.tableName).insert({
        name: name,
        migration_time: new Date()
      });
    }
  }, {
    key: 'delete',
    value: function _delete(name) {
      var client = this.getClient();

      return client(this.tableName).delete().where('name', name);
    }
  }, {
    key: 'list',
    value: function list() {
      var client = this.getClient();

      return client(this.tableName).select('name').orderBy('name').then(function (result) {
        return _lodash2.default.map(result, 'name');
      });
    }
  }]);

  return sqlStore;
}(_mariner.Store);

exports.default = sqlStore;