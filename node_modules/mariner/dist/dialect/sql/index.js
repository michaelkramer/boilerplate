'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _errors = require('../../errors');

var _store = require('./store');

var _store2 = _interopRequireDefault(_store);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _migration = require('./migration.stub');

var _migration2 = _interopRequireDefault(_migration);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UP_DELIMITER = '---!> MARINER:MIGRATE:UP:';
var DOWN_DELIMITER = '---!> MARINER:MIGRATE:DOWN:';

var UP = 'up';
var DOWN = 'down';

var sqlDialect = function () {
  _createClass(sqlDialect, null, [{
    key: 'check',
    value: function check(extension) {
      return extension === 'sql';
    }
  }]);

  function sqlDialect(mariner, options) {
    _classCallCheck(this, sqlDialect);

    this.mariner = mariner;
    this.options = options;
    this.store = new _store2.default(options);
  }

  _createClass(sqlDialect, [{
    key: 'getSql',
    value: function getSql(direction, name) {
      var _this = this;

      return this.mariner.getMigrationContent(direction, name).then(function (sql) {
        var promise = void 0;

        if (direction === UP) {
          promise = _this.getUpMigration(sql, name);
        } else if (direction === DOWN) {
          promise = _this.getDownMigration(sql, name);
        } else {
          throw new Error('Invalid direction');
        }

        return promise;
      });
    }
  }, {
    key: 'getUpMigration',
    value: function getUpMigration(sql, name) {
      var lines = sql.split('\n');
      var output = [];

      var adding = false;

      for (var i = 0; i < lines.length; i++) {
        if (lines[i].indexOf(UP_DELIMITER) === 0) {
          adding = true;
          continue;
        }

        if (lines[i].indexOf(DOWN_DELIMITER) === 0) {
          break;
        }

        if (adding) {
          output.push(lines[i]);
        }
      }

      if (output.length === 0) {
        throw new _errors.InvalidMigrationError(name);
      }

      return output.join('\n');
    }
  }, {
    key: 'getDownMigration',
    value: function getDownMigration(sql, name) {
      var lines = sql.split('\n');
      var output = [];

      var adding = false;
      for (var i = 0; i < lines.length; i++) {
        if (lines[i].indexOf(DOWN_DELIMITER) === 0) {
          adding = true;
          continue;
        }

        if (adding) {
          output.push(lines[i]);
        }
      }

      if (output.length === 0) {
        throw new _errors.NoDownMigrationError(name);
      }

      return output.join('\n');
    }
  }, {
    key: 'migrate',
    value: function migrate(direction, name) {
      var _this2 = this;

      return this.getSql(direction, name).then(function (sql) {
        return _this2.store.execute(sql);
      });
    }
  }, {
    key: 'create',
    value: function create(dest, options) {
      return new _bluebird2.default(function (resolve, reject) {
        return _fs2.default.writeFile(dest, _migration2.default, function (err) {
          return err ? reject(err) : resolve(dest);
        });
      });
    }
  }]);

  return sqlDialect;
}();

sqlDialect.Store = _store2.default;
exports.default = sqlDialect;