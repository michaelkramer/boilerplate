'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _errors = require('../../errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var STUB_PATH = _path2.default.join(__dirname, '/migration.stub.js');
var UP = 'up';
var DOWN = 'down';

var jsDialect = function () {
  _createClass(jsDialect, null, [{
    key: 'check',
    value: function check(ext) {
      return ext === 'js';
    }
  }]);

  function jsDialect(mariner, options, config) {
    _classCallCheck(this, jsDialect);

    this.mariner = mariner;
    this.options = options;
    this.config = config;
  }

  _createClass(jsDialect, [{
    key: 'migrate',
    value: function migrate(direction, name) {
      var module = require(_path2.default.join(this.config.directory, name));

      if (direction === UP && !module.up) {
        throw new _errors.InvalidMigrationError(name);
      } else if (direction === DOWN && !module.down) {
        throw new _errors.NoDownMigrationError(name);
      }

      return direction === UP ? module.up() : module.down();
    }
  }, {
    key: 'create',
    value: function create(dest, options) {
      return new _bluebird2.default(function (resolve, reject) {
        var source = _fs2.default.createReadStream(STUB_PATH);
        var out = _fs2.default.createWriteStream(dest);

        source.on('error', reject);
        out.on('error', reject);

        out.on('finish', function () {
          return resolve(dest);
        });

        source.pipe(out);
      });
    }
  }]);

  return jsDialect;
}();

exports.default = jsDialect;